## Dev datasource defaults (H2 in-memory by default; override to use MySQL locally)
spring.datasource.url=${DB_URL:jdbc:h2:mem:clims_dev;MODE=MySQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE}
spring.datasource.username=${DB_USERNAME:sa}
spring.datasource.password=${DB_PASSWORD:}
spring.datasource.driver-class-name=${DB_DRIVER:org.h2.Driver}

# --- Postgres example (uncomment / set env vars to use Postgres locally) ---
# To use Postgres instead of the in-memory H2 DB for local development, set the
# following environment variables (or replace values below). Then restart the
# application. Flyway will run migrations against the configured DB.
#
# DB_URL example:
#   export DB_URL=jdbc:postgresql://localhost:5432/clims_dev
#   export DB_USERNAME=clims_user
#   export DB_PASSWORD=clims_password
#   export DB_DRIVER=org.postgresql.Driver
#
# Or uncomment and set them directly here for convenience during local dev:
# spring.datasource.url=jdbc:postgresql://localhost:5432/clims_dev
# spring.datasource.username=clims_user
# spring.datasource.password=clims_password
# spring.datasource.driver-class-name=org.postgresql.Driver
#
# Notes:
# - Ensure the Postgres server is running and the database/schema exists.
# - Create the DB user and grant privileges before starting the app, or set
#   Flyway to create the schema if desired (not recommended for prod).
# - The default `spring.flyway.locations` will apply the same migrations used
#   for H2. If you run both H2 and Postgres alternately, migrations are idempotent
#   but you may want separate DBs to avoid conflicts.
# - On Windows PowerShell use `setx` or set environment variables in your shell
#   session before launching the JVM. In VS Code tasks, add them to the task env.


# Show SQL in dev for easier debugging
spring.jpa.show-sql=${JPA_SHOW_SQL:true}
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.database-platform=${JPA_DIALECT:org.hibernate.dialect.H2Dialect}

# Flyway migrations on startup
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.clean-disabled=true

# CORS defaults for local frontends (include Vite ports)
app.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:4200,http://localhost:5173,http://127.0.0.1:5173}
app.cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,PATCH,DELETE,OPTIONS}
app.cors.allowed-headers=${CORS_ALLOWED_HEADERS:Authorization,Content-Type}

# Swagger/OpenAPI enabled
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true

# Logging
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.orm.jdbc.bind=TRACE
logging.level.org.springdoc=DEBUG
logging.level.org.springframework.web=DEBUG
# Write logs to file for easier troubleshooting during dev
logging.file.name=logs/dev.log

# Show detailed error info in dev to debug issues like OpenAPI generation
server.error.include-exception=true
server.error.include-message=always
server.error.include-stacktrace=always

# Dev JWT defaults to ease local startup (touch to trigger devtools reload)
security.jwt.secret=${JWT_SECRET:VGhpcy1pcy1hLXRlc3Qtand0LXNlY3JldC1rZXktMzJieXRlcy0xMjM0NTY3ODkwMTIzNA==}
security.jwt.expiration-ms=${JWT_EXPIRATION_MS:86400000}

